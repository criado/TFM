#include "complex.h"

////////////////////////////////////////////////////////////////////////////////
// S0: Bit-jutsu stuff
////////////////////////////////////////////////////////////////////////////////
inline uint countBits(uint i) {
  i= i-((i>>1)&0x55555555); i= (i&0x33333333)+((i>>2)&0x33333333);
  return (((i+(i>>4))&0x0F0F0F0F)*0x01010101) >> 24;
}
inline uint nextSubset(uint f, uint x) {return (((((1<<2*N)-1)^f)|x)+1)&f;}

////////////////////////////////////////////////////////////////////////////////
// S1: Constructors and IO
////////////////////////////////////////////////////////////////////////////////
Prismatoid::Prismatoid(int _dim) {}

Prismatoid::Prismatoid(string file){}

void Prismatoid::write(string file){}

////////////////////////////////////////////////////////////////////////////////
// S2: Flippin' magic.
////////////////////////////////////////////////////////////////////////////////

void Prismatoid::addFacet(mask f){}
void Prismatoid::initOptions(){}

mask Prismatoid::findMove(){}
mask Prismatoid::move(mask u){}
mask Prismatoid::move(){}

bool Prismatoid::checkFlipability(mask u){}

////////////////////////////////////////////////////////////////////////////////
// S3: Costs and graph stuff
////////////////////////////////////////////////////////////////////////////////
void Prismatoid::initGraph(){}
void Prismatoid::diameter(queue<mask>& q){}
void Prismatoid::relax(mask f){}
pair<int, ii> Prismatoid::costs(){}
pair<vi, vi> Prismatoid::statsForSantos(){}

////////////////////////////////////////////////////////////////////////////////
// S4: Dont panic. Please dont panic. Ok, now panic.
////////////////////////////////////////////////////////////////////////////////
bool Prismatoid::everythingIsOK(){}

